// Code generated by mocktail; DO NOT EDIT.

package a

import (
	"a/b"
	"a/c"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// aAerMock mock of AAer.
type aAerMock struct{ mock.Mock }

// newAAerMock creates a new aAerMock.
func newAAerMock(tb testing.TB) *aAerMock {
	tb.Helper()

	m := &aAerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *aAerMock) GetAA(id string) (*b.A[A], error) {
	_ret := _m.Called(id)

	if _rf, ok := _ret.Get(0).(func(string) (*b.A[A], error)); ok {
		return _rf(id)
	}

	_ra0, _ := _ret.Get(0).(*b.A[A])
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *aAerMock) OnGetAA(id string) *aAerGetAACall {
	return &aAerGetAACall{Call: _m.Mock.On("GetAA", id), Parent: _m}
}

func (_m *aAerMock) OnGetAARaw(id interface{}) *aAerGetAACall {
	return &aAerGetAACall{Call: _m.Mock.On("GetAA", id), Parent: _m}
}

type aAerGetAACall struct {
	*mock.Call
	Parent *aAerMock
}

func (_c *aAerGetAACall) Panic(msg string) *aAerGetAACall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *aAerGetAACall) Once() *aAerGetAACall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *aAerGetAACall) Twice() *aAerGetAACall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *aAerGetAACall) Times(i int) *aAerGetAACall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *aAerGetAACall) WaitUntil(w <-chan time.Time) *aAerGetAACall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *aAerGetAACall) After(d time.Duration) *aAerGetAACall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *aAerGetAACall) Run(fn func(args mock.Arguments)) *aAerGetAACall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *aAerGetAACall) Maybe() *aAerGetAACall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *aAerGetAACall) TypedReturns(a *b.A[A], b error) *aAerGetAACall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *aAerGetAACall) ReturnsFn(fn func(string) (*b.A[A], error)) *aAerGetAACall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *aAerGetAACall) TypedRun(fn func(string)) *aAerGetAACall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_id := args.String(0)
		fn(_id)
	})
	return _c
}

func (_c *aAerGetAACall) OnGetAA(id string) *aAerGetAACall {
	return _c.Parent.OnGetAA(id)
}

func (_c *aAerGetAACall) OnGetAARaw(id interface{}) *aAerGetAACall {
	return _c.Parent.OnGetAARaw(id)
}

// aBerMock mock of ABer.
type aBerMock struct{ mock.Mock }

// newABerMock creates a new aBerMock.
func newABerMock(tb testing.TB) *aBerMock {
	tb.Helper()

	m := &aBerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *aBerMock) GetAB(id string) (*b.A[b.B], error) {
	_ret := _m.Called(id)

	if _rf, ok := _ret.Get(0).(func(string) (*b.A[b.B], error)); ok {
		return _rf(id)
	}

	_ra0, _ := _ret.Get(0).(*b.A[b.B])
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *aBerMock) OnGetAB(id string) *aBerGetABCall {
	return &aBerGetABCall{Call: _m.Mock.On("GetAB", id), Parent: _m}
}

func (_m *aBerMock) OnGetABRaw(id interface{}) *aBerGetABCall {
	return &aBerGetABCall{Call: _m.Mock.On("GetAB", id), Parent: _m}
}

type aBerGetABCall struct {
	*mock.Call
	Parent *aBerMock
}

func (_c *aBerGetABCall) Panic(msg string) *aBerGetABCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *aBerGetABCall) Once() *aBerGetABCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *aBerGetABCall) Twice() *aBerGetABCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *aBerGetABCall) Times(i int) *aBerGetABCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *aBerGetABCall) WaitUntil(w <-chan time.Time) *aBerGetABCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *aBerGetABCall) After(d time.Duration) *aBerGetABCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *aBerGetABCall) Run(fn func(args mock.Arguments)) *aBerGetABCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *aBerGetABCall) Maybe() *aBerGetABCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *aBerGetABCall) TypedReturns(a *b.A[b.B], b error) *aBerGetABCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *aBerGetABCall) ReturnsFn(fn func(string) (*b.A[b.B], error)) *aBerGetABCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *aBerGetABCall) TypedRun(fn func(string)) *aBerGetABCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_id := args.String(0)
		fn(_id)
	})
	return _c
}

func (_c *aBerGetABCall) OnGetAB(id string) *aBerGetABCall {
	return _c.Parent.OnGetAB(id)
}

func (_c *aBerGetABCall) OnGetABRaw(id interface{}) *aBerGetABCall {
	return _c.Parent.OnGetABRaw(id)
}

// aCerMock mock of ACer.
type aCerMock struct{ mock.Mock }

// newACerMock creates a new aCerMock.
func newACerMock(tb testing.TB) *aCerMock {
	tb.Helper()

	m := &aCerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *aCerMock) GetAC(id string) (*b.A[c.C], error) {
	_ret := _m.Called(id)

	if _rf, ok := _ret.Get(0).(func(string) (*b.A[c.C], error)); ok {
		return _rf(id)
	}

	_ra0, _ := _ret.Get(0).(*b.A[c.C])
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *aCerMock) OnGetAC(id string) *aCerGetACCall {
	return &aCerGetACCall{Call: _m.Mock.On("GetAC", id), Parent: _m}
}

func (_m *aCerMock) OnGetACRaw(id interface{}) *aCerGetACCall {
	return &aCerGetACCall{Call: _m.Mock.On("GetAC", id), Parent: _m}
}

type aCerGetACCall struct {
	*mock.Call
	Parent *aCerMock
}

func (_c *aCerGetACCall) Panic(msg string) *aCerGetACCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *aCerGetACCall) Once() *aCerGetACCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *aCerGetACCall) Twice() *aCerGetACCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *aCerGetACCall) Times(i int) *aCerGetACCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *aCerGetACCall) WaitUntil(w <-chan time.Time) *aCerGetACCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *aCerGetACCall) After(d time.Duration) *aCerGetACCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *aCerGetACCall) Run(fn func(args mock.Arguments)) *aCerGetACCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *aCerGetACCall) Maybe() *aCerGetACCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *aCerGetACCall) TypedReturns(a *b.A[c.C], b error) *aCerGetACCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *aCerGetACCall) ReturnsFn(fn func(string) (*b.A[c.C], error)) *aCerGetACCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *aCerGetACCall) TypedRun(fn func(string)) *aCerGetACCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_id := args.String(0)
		fn(_id)
	})
	return _c
}

func (_c *aCerGetACCall) OnGetAC(id string) *aCerGetACCall {
	return _c.Parent.OnGetAC(id)
}

func (_c *aCerGetACCall) OnGetACRaw(id interface{}) *aCerGetACCall {
	return _c.Parent.OnGetACRaw(id)
}

// aStringerMock mock of AStringer.
type aStringerMock struct{ mock.Mock }

// newAStringerMock creates a new aStringerMock.
func newAStringerMock(tb testing.TB) *aStringerMock {
	tb.Helper()

	m := &aStringerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *aStringerMock) GetAString(id string) (*b.A[string], error) {
	_ret := _m.Called(id)

	if _rf, ok := _ret.Get(0).(func(string) (*b.A[string], error)); ok {
		return _rf(id)
	}

	_ra0, _ := _ret.Get(0).(*b.A[string])
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *aStringerMock) OnGetAString(id string) *aStringerGetAStringCall {
	return &aStringerGetAStringCall{Call: _m.Mock.On("GetAString", id), Parent: _m}
}

func (_m *aStringerMock) OnGetAStringRaw(id interface{}) *aStringerGetAStringCall {
	return &aStringerGetAStringCall{Call: _m.Mock.On("GetAString", id), Parent: _m}
}

type aStringerGetAStringCall struct {
	*mock.Call
	Parent *aStringerMock
}

func (_c *aStringerGetAStringCall) Panic(msg string) *aStringerGetAStringCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *aStringerGetAStringCall) Once() *aStringerGetAStringCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *aStringerGetAStringCall) Twice() *aStringerGetAStringCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *aStringerGetAStringCall) Times(i int) *aStringerGetAStringCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *aStringerGetAStringCall) WaitUntil(w <-chan time.Time) *aStringerGetAStringCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *aStringerGetAStringCall) After(d time.Duration) *aStringerGetAStringCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *aStringerGetAStringCall) Run(fn func(args mock.Arguments)) *aStringerGetAStringCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *aStringerGetAStringCall) Maybe() *aStringerGetAStringCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *aStringerGetAStringCall) TypedReturns(a *b.A[string], b error) *aStringerGetAStringCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *aStringerGetAStringCall) ReturnsFn(fn func(string) (*b.A[string], error)) *aStringerGetAStringCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *aStringerGetAStringCall) TypedRun(fn func(string)) *aStringerGetAStringCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_id := args.String(0)
		fn(_id)
	})
	return _c
}

func (_c *aStringerGetAStringCall) OnGetAString(id string) *aStringerGetAStringCall {
	return _c.Parent.OnGetAString(id)
}

func (_c *aStringerGetAStringCall) OnGetAStringRaw(id interface{}) *aStringerGetAStringCall {
	return _c.Parent.OnGetAStringRaw(id)
}

// aStringPtrerMock mock of AStringPtrer.
type aStringPtrerMock struct{ mock.Mock }

// newAStringPtrerMock creates a new aStringPtrerMock.
func newAStringPtrerMock(tb testing.TB) *aStringPtrerMock {
	tb.Helper()

	m := &aStringPtrerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *aStringPtrerMock) GetAStringPtr(id string) (*b.A[*string], error) {
	_ret := _m.Called(id)

	if _rf, ok := _ret.Get(0).(func(string) (*b.A[*string], error)); ok {
		return _rf(id)
	}

	_ra0, _ := _ret.Get(0).(*b.A[*string])
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *aStringPtrerMock) OnGetAStringPtr(id string) *aStringPtrerGetAStringPtrCall {
	return &aStringPtrerGetAStringPtrCall{Call: _m.Mock.On("GetAStringPtr", id), Parent: _m}
}

func (_m *aStringPtrerMock) OnGetAStringPtrRaw(id interface{}) *aStringPtrerGetAStringPtrCall {
	return &aStringPtrerGetAStringPtrCall{Call: _m.Mock.On("GetAStringPtr", id), Parent: _m}
}

type aStringPtrerGetAStringPtrCall struct {
	*mock.Call
	Parent *aStringPtrerMock
}

func (_c *aStringPtrerGetAStringPtrCall) Panic(msg string) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) Once() *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) Twice() *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) Times(i int) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) WaitUntil(w <-chan time.Time) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) After(d time.Duration) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) Run(fn func(args mock.Arguments)) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) Maybe() *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) TypedReturns(a *b.A[*string], b error) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) ReturnsFn(fn func(string) (*b.A[*string], error)) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) TypedRun(fn func(string)) *aStringPtrerGetAStringPtrCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_id := args.String(0)
		fn(_id)
	})
	return _c
}

func (_c *aStringPtrerGetAStringPtrCall) OnGetAStringPtr(id string) *aStringPtrerGetAStringPtrCall {
	return _c.Parent.OnGetAStringPtr(id)
}

func (_c *aStringPtrerGetAStringPtrCall) OnGetAStringPtrRaw(id interface{}) *aStringPtrerGetAStringPtrCall {
	return _c.Parent.OnGetAStringPtrRaw(id)
}
